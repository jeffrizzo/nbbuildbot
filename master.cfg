# -*- python -*-
# ex: set syntax=python:

# Where am I running?
import socket

from mycvs import MyCVS


host = socket.gethostname()

# NetBSD arches to be built.
#arches = ['amiga','amd64','arc','evbearm-el','evbearmhf-el','evbppc',
#          'hp700','hpcsh','i386','macppc','sparc','sparc64','vax']
arches = ['amd64', 'hpcsh', 'i386', 'sparc64', 'vax']

kernels = {'amiga': ['GENERIC'],
           'amd64': ['GENERIC', 'XEN3_DOM0', 'XEN3_DOMU'],
           'arc': ['GENERIC'],
           'evbearm-el': ['BEAGLEBONE', 'INTEGRATOR_CP'],
           'evbearmhf-el': ['ARMADAXP', 'RPI'],
           'evbppc': ['TWRP1025'],
           'hp700': ['GENERIC.MP'],
           'hpcsh': ['GENERIC'],
           'i386': ['ALL', 'GENERIC', 'XEN3PAE_DOM0', 'XEN3PAE_DOMU'],
           'macppc': ['GENERIC'],
           'sparc': ['GENERIC'],
           'sparc64': ['GENERIC'],
           'vax': ['GENERIC']
}
kernelbuildstring = {}
for i in kernels.keys():
    kernelbuildstring[i] = []
    for k in kernels[i]:
        kernelbuildstring[i].append("kernel=%s" % k)

if host == 'build.tastylime.net':
    slavelist = ['pomegranate', 'freebuild', 'buildslave1', 'cassava']
else:
    slavelist = ['pomegranate', 'freebuild', 'cassava']

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
import json

# actual information is kept in an external json so no secrets here
secrets = json.load(open("secrets.json"))
slavedict = secrets[0]
twitterdict = secrets[1]
webauthlist = secrets[2]
irclist = secrets[3]

c['slaves'] = []

for s in slavedict.keys():
    c['slaves'].append(BuildSlave(s, slavedict[s], max_builds=1))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989
#c['protocols']['pb']['port'] = 9989

####### CHANGESOURCES
c['change_source'] = []

#from buildbot.changes.pb import PBChangeSource
#c['change_source'].append(PBChangeSource(port=9999, user='laura', passwd='fpga'))

from nbsourcechanges import NBCVSMaildirSource

c['change_source'].append(NBCVSMaildirSource('/home/buildbot/Mail'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case, just kick off a 'buildit' build

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []

#c['schedulers'].append(SingleBranchScheduler(
#    name='current',
#    change_filter=filter.ChangeFilter(branch=None,
#                                      project_re='.*release.*'),
#    treeStableTimer=300,
#    builderNames=['release-%s' % a for a in arches]))

def branch_filter(branch):
    branches_to_build = [None, # head?
                         "", # also head?
                         'netbsd-6',
                         'netbsd-6-0',
                         'netbsd-6-1',
                         'netbsd-6-2',
                         'netbsd-5',
                         'netbsd-5-1',
                         'netbsd-5-2']
    branches_to_ignore = []
    return branch in branches_to_build and branch not in branches_to_ignore


c['schedulers'].append(AnyBranchScheduler(
    name='current-kernel',
    change_filter=filter.ChangeFilter(category_re=".*kernel.*", branch=None),
    treeStableTimer=180,
    builderNames=['kernel-%s' % a for a in arches]))
#c['schedulers'].append(ForceScheduler(
#    name='force-release',
#    builderNames=['release-%s' % a for a in arches]))
c['schedulers'].append(ForceScheduler(
    name='force-kernel',
    builderNames=['kernel-%s' % a for a in arches]
))

####### BUILDERS

# Note that any particular build will only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.process.properties import Interpolate, Property
from buildbot.steps.slave import RemoveDirectory


releasefactory = BuildFactory()

# set some properties
releasefactory.addStep(SetPropertyFromCommand(command='sysctl -n hw.ncpu',
                                              property='ncpu'))
releasefactory.addStep(SetPropertyFromCommand(command=Interpolate('expr %(prop:ncpu)s \* 2'),
                                              property='jval'))

# check out the source
releasefactory.addStep(MyCVS(mode='incremental',
                             timeout=3600,
                             cvsroot='anoncvs@anoncvs.netbsd.org:/cvsroot',
                             login=True,
                             #               branch='HEAD',
                             cvsmodule='src',
                             global_options=['-q'],
                             extra_options=['-P'],
                             workdir='../src'
))
releasefactory.addStep(MyCVS(mode='incremental',
                             timeout=3600,
                             cvsroot='anoncvs@anoncvs.netbsd.org:/cvsroot',
                             login=True,
                             #               branch='HEAD',
                             cvsmodule='xsrc',
                             global_options=['-q'],
                             extra_options=['-P'],
                             workdir='../xsrc'
))

#f1.addStep(ShellCommand(command=['chmod', '-R', 'a-w', '.']
releasefactory.addStep(ShellCommand(command=['./build.sh',
                                             '-U',
                                             '-m', Property('arch'),
                                             '-N0',
                                             '-D', Interpolate('%(prop:workdir)s/dest.%(prop:arch)s'),
                                             '-M', Interpolate('%(prop:workdir)s/obj.%(prop:arch)s'),
                                             '-R', Interpolate('%(prop:workdir)s/release.%(prop:arch)s'),
                                             '-T', Interpolate('%(prop:workdir)s/tools.%(prop:arch)s'),
                                             '-V', 'USE_PIGZGZIP=yes',
                                             '-V', 'TMPDIR=/tmp',
                                             '-j', Property('jval'),
                                             'release'],
                                    workdir=Interpolate('%(prop:workdir)s/../src'),
                                    description='Building release',
                                    descriptionDone='release built'))

releasefactory.addStep(RemoveDirectory(dir='%(prop:workdir)s/obj.%(prop:arch)s'))
releasefactory.addStep(RemoveDirectory(dir='%(prop:workdir)s/dest.%(prop:arch)s'))

kernelfactories = {}
for arch in arches:
    kernelfactories[arch] = BuildFactory()

    kernelfactories[arch].addStep(SetPropertyFromCommand(command='/sbin/sysctl -n hw.ncpu',
                                                         property='ncpu', hideStepIf=True))
    kernelfactories[arch].addStep(SetPropertyFromCommand(command=Interpolate('expr %(prop:ncpu)s \* 2'),
                                                         property='jval', hideStepIf=True))
    kernelfactories[arch].addStep(MyCVS(mode='incremental',
                                        timeout=3600,
                                        cvsroot='anoncvs@anoncvs.netbsd.org:/cvsroot',
                                        login=True,
                                        cvsmodule='src',
                                        global_options=['-q'],
                                        extra_options=['-P'],
                                        workdir='../src',
                                        name='cvs_src',
                                        description='Getting src',
                                        descriptionDone='cvs updated'
    ))
    kernelfactories[arch].addStep(ShellCommand(command=['./build.sh',
                                                        '-U',
                                                        '-m', Property('arch'),
                                                        '-N0',
                                                        '-D', Interpolate('%(prop:workdir)s/dest.%(prop:arch)s'),
                                                        '-M', Interpolate('%(prop:workdir)s/obj.%(prop:arch)s'),
                                                        '-R', Interpolate('%(prop:workdir)s/release.%(prop:arch)s'),
                                                        '-T', Interpolate('%(prop:workdir)s/../tools.%(prop:arch)s'),
                                                        '-V', 'USE_PIGZGZIP=yes',
                                                        '-V', 'TMPDIR=/tmp',
                                                        '-j', Property('jval'),
                                                        '-u',
                                                        'tools'],
                                               workdir=Interpolate('%(prop:workdir)s/../src'),
                                               name='tools',
                                               description='Building tools',
                                               descriptionDone='tools built'))
    for k in kernels[arch]:
        kernelfactories[arch].addStep(ShellCommand(command=['./build.sh',
                                                            '-U',
                                                            '-m', Property('arch'),
                                                            '-N0',
                                                            '-D', Interpolate('%(prop:workdir)s/dest.%(prop:arch)s'),
                                                            '-M', Interpolate('%(prop:workdir)s/obj.%(prop:arch)s'),
                                                            '-R', Interpolate('%(prop:workdir)s/release.%(prop:arch)s'),
                                                            '-T',
                                                            Interpolate('%(prop:workdir)s/../tools.%(prop:arch)s'),
                                                            '-V', 'USE_PIGZGZIP=yes',
                                                            '-V', 'TMPDIR=/tmp',
                                                            '-j', Property('jval'),
                                                            'kernel=%s' % k],
                                                   workdir=Interpolate('%(prop:workdir)s/../src'),
                                                   name=k,
                                                   description=k))
    kernelfactories[arch].addStep(ShellCommand(command=['./build.sh',
                                                        '-U',
                                                        '-m', Property('arch'),
                                                        '-N0',
                                                        '-D', Interpolate('%(prop:workdir)s/dest.%(prop:arch)s'),
                                                        '-M', Interpolate('%(prop:workdir)s/obj.%(prop:arch)s'),
                                                        '-R', Interpolate('%(prop:workdir)s/release.%(prop:arch)s'),
                                                        '-T', Interpolate('%(prop:workdir)s/../tools.%(prop:arch)s'),
                                                        '-V', 'USE_PIGZGZIP=yes',
                                                        '-V', 'TMPDIR=/tmp',
                                                        '-j', Property('jval'),
                                                        'modules'],
                                               workdir=Interpolate('%(prop:workdir)s/../src'),
                                               name='modules', description="Building modules",
                                               descriptionDone="modules build"))

    kernelfactories[arch].addStep(RemoveDirectory(dir='%(prop:workdir)s/obj.%(prop:arch)s'))
    kernelfactories[arch].addStep(RemoveDirectory(dir='%(prop:workdir)s/dest.%(prop:arch)s'))

from buildbot.config import BuilderConfig


c['builders'] = []

for arch in arches:
    c['builders'].append(
        BuilderConfig(name='kernel-%s' % arch,
                      slavenames=slavelist,
                      properties={'arch': arch,
                                  'kernels': kernelbuildstring[arch]},
                      factory=kernelfactories[arch]))
#    c['builders'].append(
#        BuilderConfig(name='release-%s' % arch,
#                      slavenames=['pomegranate', 'freebuild'],
#                      properties={ 'arch' : arch },
#                      factory=releasefactory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

for webauth in webauthlist:
    authz_cfg = authz.Authz(
        # change any of these to True to enable; see the manual for more
        # options
        auth=auth.BasicAuth([(str(webauth['user']), str(webauth['password']))]),
        gracefulShutdown='auth',
        forceBuild='auth', # use this to test your slave once it is set up
        forceAllBuilds='auth',
        pingBuilder='auth',
        stopBuild='auth',
        stopAllBuilds='auth',
        cancelPendingBuild='auth',
    )
    c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status.words import IRC

for i in irclist:
    if 'port' not in i:
        i['port'] = '6667'
    irc = IRC(str(i['server']), str(i['nick']),
              port=int(i['port']),
              useColors=False,
              channels=[{'channel': str(i['channel'])}],
              notify_events={
                  'exception': 1,
                  'successToFailure': 1,
                  'failureToSuccess': 1,
              }
    )
    c['status'].append(irc)

import twitter
c['status'].append(twitter.TwitterStatusPush(twitterdict))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'NetBSD'
c['titleURL'] = 'http://releng.NetBSD.org/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://%s/' % host

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = 'sqlite:///state.sqlite'
